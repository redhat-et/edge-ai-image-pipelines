# Adds MicroShift to a Bootc Tegra image
# 
# Args:
#	BASE_IMAGE: OCI reference to base Bootc image. Image should already contain application containers
#	RESOURCE_DEFINITIONS: a whitespace-delimited list of kubernetes resource definitions, including
#		applications, that should be appended to the kustomizations. The github repository will be mounted at
#		/repo, so paths to any resources in the github repository should be given relative to that.

ARG BASE_IMAGE
FROM ${BASE_IMAGE}

ARG RESOURCE_DEFINITIONS

ENV IMAGE_STORAGE_DIR=/usr/lib/containers/storage
ENV IMAGE_LIST_FILE=${IMAGE_STORAGE_DIR}/image-list.txt

# Prevent the kernel from being updated
# RUN echo "exclude=kernel* kmod-kvdo" >> /etc/yum.conf

# Set microshift version to install
ARG USHIFT_VER=4.18

# Install microshift
RUN dnf config-manager \
        --set-enabled rhocp-${USHIFT_VER}-for-rhel-9-$(uname -m)-rpms \
        --set-enabled fast-datapath-for-rhel-9-$(uname -m)-rpms
RUN dnf install -y firewalld microshift microshift-release-info && \
    systemctl enable microshift && \
    dnf clean all

# Mandatory firewall configuration for microshift
RUN firewall-offline-cmd --zone=public --add-port=22/tcp && \
    firewall-offline-cmd --zone=trusted --add-source=10.42.0.0/16 && \
    firewall-offline-cmd --zone=trusted --add-source=169.254.169.1

# Create a systemd unit to recursively make the root filesystem subtree
# shared as required by OVN images
RUN cat > /etc/systemd/system/microshift-make-rshared.service <<'EOF'
[Unit]
Description=Make root filesystem shared
Before=microshift.service
ConditionVirtualization=container
[Service]
Type=oneshot
ExecStart=/usr/bin/mount --make-rshared /
[Install]
WantedBy=multi-user.target
EOF
RUN systemctl enable microshift-make-rshared.service

# Pull the container images into storage. Requires that copy-embeded-images.service was installed (found in Containerfile.podman)
RUN --mount=type=secret,id=openshift-pull-secret,dst=/run/secrets/pull-secret.json <<EOF
images="$(jq -r ".images[]" /usr/share/microshift/release/release-"$(uname -m)".json)" ; 
for img in ${images} ; do 
	/opt/physically-bound-images/embed_image.sh $img "--authfile /run/secrets/pull-secret.json --multi-arch=all"
done
EOF

RUN mkdir -p /usr/lib/systemd/system/microshift.service.d

RUN cat <<EOF > /usr/lib/systemd/system/microshift.service.d/microshift-copy-images.conf
[Unit]
Requires=copy-embedded-images.service
After=copy-embedded-images.service
EOF

# Make MicroShift client config the default client config for oc and kubectl
RUN <<EOF 
mkdir -p /var/roothome/.kube
ln -s /var/lib/microshift/resources/kubeadmin/kubeconfig /var/roothome/.kube/config
EOF

# Create CRI-O configurations 
RUN nvidia-ctk runtime configure --runtime=crio --set-as-default --config=/etc/crio/crio.conf.d/99-nvidia.conf

# Create Kustomizations and add GPU support Daemonset
RUN <<EOF 
mkdir -p /etc/microshift/manifests
curl -L https://raw.githubusercontent.com/NVIDIA/k8s-device-plugin/v0.17.1/deployments/static/nvidia-device-plugin.yml -o /etc/microshift/manifests/nvidia-device-plugin.yml
EOF

RUN cat <<EOF > /etc/microshift/manifests/kustomization.yml
apiVersion: kustomize.config.k8s.io/v1beta1
kind: Kustomization
resources:
EOF

RUN <<EOF
echo " - nvidia-device-plugin.yml" >> /etc/microshift/manifests/kustomization.yml

# Copy application resources
for resource in ${RESOURCE_DEFINITIONS} ; do
	cp $resource /etc/microshift/manifests
	echo " - ${resource##*/}" >> /etc/microshift/manifests/kustomization.yml
done
EOF
