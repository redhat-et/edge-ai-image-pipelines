# Adds Podman images to a RHEL Bootc image
#
# This must be done in a bit of a roundabout way because we can't run overlayfs on top of overlayfs
# (which would be done by default if we wanted to `podman pull` these images). We could configure `podman pull`
# to use the vfs driver, but this would use and insane size_of_entire_image * number_of_layers of disk storage
#
# Args:
#   BASE_IMAGE: Reference to a RHEL Bootc image (usually the one built by tegra/Containerfile.base)
#   APP_IMAGES: Whitespace-delimited list of podman container images to add to this image
#   DAT_IMAGES: Whitespace-delimited list of podman artifact images to add to this image

ARG BASE_IMAGE=quay.io/redhat-user-workloads/octo-edge-tenant/rhel-bootc-jetson-rhel94:latest
FROM ${BASE_IMAGE}
LABEL quay.expires-after=120d

RUN <<EOF
dnf install -y pip
pip install uv
uv pip install --system jetson-stats
EOF

# Add scripts for embedding and copying physically bound images
COPY --chmod=0555 ./tegra/physically-bound-images/embed_image.sh \
      /opt/physically-bound-images/embed_image.sh
COPY --chmod=0555 ./tegra/physically-bound-images/copy_embedded_images.sh \
      /opt/physically-bound-images/copy_embedded_images.sh

# Create and enable a systemd service to copy embedded images
RUN cat <<EOF > /etc/systemd/system/copy-embedded-images.service
[Unit]
Description=Copy embedded images
Wants=basic.target network-online.target
After=basic.target network-online.target

[Service]
Type=oneshot
ExecStart=/opt/physically-bound-images/copy_embedded_images.sh
RemainAfterExit=yes

[Install]
WantedBy=multi-user.target
EOF
RUN systemctl enable copy-embedded-images

ARG APP_IMAGES
ARG DAT_IMAGES
# Pull and embed application and data images
RUN <<PULL
# Embed application images
for IMAGE in ${APP_IMAGES}; do
  /opt/physically-bound-images/embed_image.sh ${IMAGE}
done
# Embed data images (like modelcars) ignoring the arch
for IMAGE in ${DAT_IMAGES}; do
  /opt/physically-bound-images/embed_image.sh ${IMAGE}
done
PULL
